diff --git a/deps/libcrystal/CMakeLists.txt b/deps/libcrystal/CMakeLists.txt
--- a/deps/libcrystal/CMakeLists.txt
+++ b/deps/libcrystal/CMakeLists.txt
@@ -14,6 +14,8 @@ ExternalProject_Add(
     DOWNLOAD_DIR ${PROJECT_DEPS_TARBALL_DIR}
     DOWNLOAD_NO_PROGRESS 1
 
+    PATCH_COMMAND ${PATCH_EXE} -s -p1 < ${CMAKE_CURRENT_LIST_DIR}/libcrystal.patch
+
     CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${PROJECT_INT_DIST_DIR}
         -DENABLE_STATIC=${ENABLE_STATIC}
         -DENABLE_SHARED=${ENABLE_SHARED}
diff --git a/deps/libcrystal/libcrystal.patch b/deps/libcrystal/libcrystal.patch
new file mode 100644
--- /dev/null
+++ b/deps/libcrystal/libcrystal.patch
@@ -0,0 +1,282 @@
+diff --git a/include/crystal/linkedhashtable.h b/include/crystal/linkedhashtable.h
+--- a/include/crystal/linkedhashtable.h
++++ b/include/crystal/linkedhashtable.h
+@@ -39,11 +39,11 @@ typedef struct _hash_entry_t
+     const void *        key;
+     size_t              keylen;
+     void *              data;
+-    char                __opaque[sizeof(void *) * 4];
++    char                __opaque[sizeof(void *) * 5];
+ } hash_entry_t;
+ 
+ typedef struct hashtable_iterator_t {
+-    char __opaque[sizeof(void *) * 4];
++    char __opaque[sizeof(void *) * 3];
+ } hashtable_iterator_t;
+ 
+ CRYSTAL_API
+diff --git a/src/linkedhashtable.c b/src/linkedhashtable.c
+--- a/src/linkedhashtable.c
++++ b/src/linkedhashtable.c
+@@ -41,6 +41,7 @@ typedef struct _hash_entry_i
+     size_t               keylen;
+     void *               data;
+     uint32_t             hash_code;
++    int                  mod_count;
+     struct _hash_entry_i *next;
+     struct _hash_entry_i *lst_prev;
+     struct _hash_entry_i *lst_next;
+@@ -49,7 +50,6 @@ typedef struct _hash_entry_i
+ typedef struct hashtable_iterator_i {
+     hashtable_t *htab;
+     hash_entry_i *current;
+-    hash_entry_i *next;
+     int expected_mod_count;
+ } hashtable_iterator_i;
+ 
+@@ -61,7 +61,6 @@ static_assert(sizeof(hashtable_iterator_t) >= sizeof(hashtable_iterator_i),
+ struct _hashtable_t {
+     size_t      capacity;
+     size_t      count;
+-    int         mod_count;
+     int         synced;
+     pthread_rwlock_t lock;
+ 
+@@ -135,7 +134,6 @@ hashtable_t *hashtable_create(size_t capacity, int synced,
+ 
+     htab->capacity = capacity;
+     htab->count = 0;
+-    htab->mod_count = 0;
+     htab->synced = synced;
+ 
+     htab->hash_code = hash_code ? hash_code : default_hash_code;
+@@ -143,6 +141,8 @@ hashtable_t *hashtable_create(size_t capacity, int synced,
+ 
+     htab->lst_head.lst_next = &htab->lst_head;
+     htab->lst_head.lst_prev = &htab->lst_head;
++    htab->lst_head.data = htab;
++    htab->lst_head.mod_count = 0;
+ 
+     return htab;
+ }
+@@ -190,6 +190,7 @@ static void hashtable_clear_i(hashtable_t *htab)
+     entry = htab->lst_head.lst_next;
+     while (entry != &htab->lst_head) {
+         cur = entry;
++        cur->mod_count++;
+         entry = entry->lst_next;
+ 
+         deref(cur->data);
+@@ -201,7 +202,6 @@ static void hashtable_clear_i(hashtable_t *htab)
+     htab->lst_head.lst_prev = &htab->lst_head;
+ 
+     htab->count = 0;
+-    htab->mod_count++;
+ }
+ 
+ static void hashtable_destroy(void *obj)
+@@ -295,13 +295,14 @@ void *hashtable_put(hashtable_t *htab, hash_entry_t *entry)
+         new_entry->lst_prev->lst_next = new_entry;
+         new_entry->lst_next->lst_prev = new_entry;
+ 
++        (*ent)->mod_count++;
+         deref((*ent)->data);
+         *ent = new_entry;
+     } else {
+         hashtable_add(htab, entry);
+     }
+ 
+-    htab->mod_count++;
++    new_entry->mod_count++;
+ 
+     hashtable_unlock(htab);
+ 
+@@ -327,7 +328,6 @@ void *hashtable_get(hashtable_t *htab, const void *key, size_t keylen)
+     hashtable_unlock(htab);
+ 
+     return val;
+-
+ }
+ 
+ int hashtable_exist(hashtable_t *htab, const void *key, size_t keylen)
+@@ -373,12 +373,13 @@ static void *hashtable_remove_nolock(hashtable_t *htab, const void *key, size_t
+         to_remove->lst_prev->lst_next = to_remove->lst_next;
+         to_remove->lst_next->lst_prev = to_remove->lst_prev;
+ 
++        to_remove->mod_count++;
++
+         // val = deref(to_remove->data);
+         // Pass reference to caller
+         val = to_remove->data;
+ 
+         htab->count--;
+-        htab->mod_count++;
+     }
+ 
+     return val;
+@@ -427,10 +428,10 @@ hashtable_iterator_t *hashtable_iterate(hashtable_t *htab,
+ 
+     hashtable_rlock(htab);
+ 
+-    it->htab = htab;
+-    it->current = NULL;
+-    it->next = htab->lst_head.lst_next;
+-    it->expected_mod_count = htab->mod_count;
++    it->htab = ref(htab);
++    it->current = &htab->lst_head;
++    ref(it->current->data);
++    it->expected_mod_count = it->current->mod_count;
+ 
+     hashtable_unlock(htab);
+ 
+@@ -441,26 +442,34 @@ hashtable_iterator_t *hashtable_iterate(hashtable_t *htab,
+ int hashtable_iterator_next(hashtable_iterator_t *iterator, void **key,
+                               size_t *keylen, void **data)
+ {
+-    int rc;
+     hashtable_iterator_i *it = (hashtable_iterator_i *)iterator;
+ 
+-    assert(it && it->htab && it->next && data);
+-    if (!it || !it->htab || !it->next || !data) {
++    assert(it && data);
++    if (!it || !data) {
+         errno = EINVAL;
+         return -1;
+     }
+ 
++    if (!it->htab)
++        return 0;
++
+     hashtable_rlock(it->htab);
+ 
+-    if (it->expected_mod_count != it->htab->mod_count) {
+-        errno = EAGAIN;
+-        rc = -1;
+-    } else {
+-        if (it->next == &it->htab->lst_head) { // end
+-            rc = 0;
++    if (it->expected_mod_count == it->current->mod_count) {
++        deref(it->current->data);
++
++        if (it->current->lst_next == &it->htab->lst_head) {
++            hashtable_unlock(it->htab);
++            deref(it->htab);
++            it->current = NULL;
++            it->htab = NULL;
++            it->expected_mod_count = 0;
++
++            return 0;
+         } else {
+-            it->current = it->next;
+-            it->next = it->next->lst_next;
++            it->current = it->current->lst_next;
++            ref(it->current->data);
++            it->expected_mod_count = it->current->mod_count;
+ 
+             if (key)
+                 *key = (void *)it->current->key;
+@@ -470,57 +479,82 @@ int hashtable_iterator_next(hashtable_iterator_t *iterator, void **key,
+             *data = it->current->data;
+             ref(*data);
+ 
+-            rc = 1;
++            hashtable_unlock(it->htab);
++
++            return 1;
+         }
+-    }
++    } else {
++        deref(it->current->data);
+ 
+-    hashtable_unlock(it->htab);
++        if (!it->htab->count) {
++            hashtable_unlock(it->htab);
++            deref(it->htab);
++            it->htab = NULL;
++            it->current = NULL;
++            it->expected_mod_count = 0;
++
++            return 0;
++        } else {
++            it->current = it->htab->lst_head.lst_next;
++            ref(it->current->data);
++            it->expected_mod_count = it->current->mod_count;
++
++            if (key)
++                *key = (void *)it->current->key;
++            if (keylen)
++                *keylen = it->current->keylen;
++
++            *data = it->current->data;
++            ref(*data);
+ 
+-    return rc;
++            hashtable_unlock(it->htab);
++
++            return 1;
++        }
++    }
+ }
+ 
+ int hashtable_iterator_has_next(hashtable_iterator_t *iterator)
+ {
+     hashtable_iterator_i *it = (hashtable_iterator_i *)iterator;
+ 
+-    assert(it && it->htab && it->next);
+-    if (!it || !it->htab || !it->next) {
++    assert(it);
++    if (!it) {
+         errno = EINVAL;
+         return 0;
+     }
+ 
+-    return it->next != &it->htab->lst_head;
++    return it->htab ? 1 : 0;
+ }
+ 
+ // return 1 on success, 0 nothing removed, -1 on modified conflict or error.
+ int hashtable_iterator_remove(hashtable_iterator_t *iterator)
+ {
+-    void *ptr;
+     hashtable_iterator_i *it = (hashtable_iterator_i *)iterator;
++    hash_entry_i *tmp;
+ 
+-    assert(it && it->htab && it->next && it->current);
+-    if (!it || !it->htab || !it->next || !it->current) {
++    assert(it && it->htab && it->current && it->current != &it->htab->lst_head);
++    if (!it || !it->htab || !it->current || it->current == &it->htab->lst_head) {
+         errno = EINVAL;
+         return -1;
+     }
+ 
+     hashtable_wlock(it->htab);
+ 
+-    if (it->expected_mod_count != it->htab->mod_count) {
+-        errno = EAGAIN;
++    if (it->expected_mod_count != it->current->mod_count) {
+         hashtable_unlock(it->htab);
+-        return -1;
++        return 0;
+     }
+ 
+-    ptr = hashtable_remove_nolock(it->htab, it->current->key, it->current->keylen);
+-    if (ptr) {
+-        deref(ptr);
+-        it->current = NULL;
+-        it->expected_mod_count++;
+-        hashtable_unlock(it->htab);
+-        return 1;
+-    }
++    deref(it->current->data);
++    tmp = it->current;
++    it->current = tmp->lst_prev;
++    ref(it->current->data);
++    it->expected_mod_count = it->current->mod_count;
++
++    deref(hashtable_remove_nolock(it->htab, tmp->key, tmp->keylen));
+ 
+     hashtable_unlock(it->htab);
+-    return 0;
++
++    return 1;
+ }
